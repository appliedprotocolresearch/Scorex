openapi: "3.0.0"

info:
  version: "0.1"
  title: Scorex Node API example
  description: API docs for example Scorex project.
  contact:
    name: Scorex framework Team
    email: kushi@protonmail.com
    url: https://github.com/scorexfoundation/scorex
  license:
    name: CC0 1.0 Universal
    url: https://raw.githubusercontent.com/ScorexFoundation/Scorex/master/COPYING

components:
  schemas:
    # Objects
    ModifierId:
      description: Base16-encoded 32 byte modifier id
      type: string
      format: base16
      example: 3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117

    Digest32:
      description: Base16-encoded 32 byte digest
      type: string
      format: base16
      example: e15a5bb0a1ad2f341a50c4f3fdcb01a516f39069baf66977e7e026a69e9a080d

    Peer:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          example: 127.0.0.1:5673
        name:
          type: string
          example: mynode
        nonce:
          type: integer
          # int32
          format: int64
          example: 123456
        lastSeen:
          type: integer
          # int32
          format: int64
          example: 123456
    BlacklistedPeers:
      type: object
      required:
        - addresses
      properties:
        addresses:
          type: array
          items:
            type: string
            example: 127.0.0.1:27272
    ApiError:
      type: object
      required:
        - error
        - reason
        - detail
      properties:
        error:
          type: int32
          description: Error code
          example: 500
        reason:
          type: string
          description: String error code
          example: 'Internal server error'
        detail:
          type: string
          nullable: true
          description: Detailed error description

paths:

  /nodeView/openSurface:
    get:
      summary: Get history open surface
      operationId: getOpenSurface
      tags:
        - nodeView
      responses:
        200:
          description: Array of modifier ids
          content:
            application/json:
              schema:
                type: array
                example: ["3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117"]
                items:
                  $ref: '#/components/schemas/ModifierId'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /nodeView/persistentModifier/{modifierId}:
    get:
      summary: Get history open surface
      operationId: getPersistentModifierById
      tags:
        - nodeView
      parameters:
        - in: path
          name: modifierId
          required: true
          description: ID of a requested modifier
          schema:
            $ref: '#/components/schemas/ModifierId'
      responses:
        200:
          description: Node view modifier
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /nodeView/pool:
    get:
      summary: Get memory pool
      operationId: getPool
      tags:
        - nodeView
      responses:
        200:
          description: Memory pool
          content:
            application/json:
              schema:
                type: object
                required:
                  - size
                  - transactions
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/all:
    get:
      summary: Get all known peers
      operationId: getAllPeers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connected:
    get:
      summary: Get current connected peers
      operationId: getConnectedPeers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connect:
    post:
      summary: Add address to peers list
      operationId: connectToPeer
      tags:
        - peers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: 127.0.0.1:5673
      responses:
        200:
          description: Attempt to connect to the peer
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/transfer:
    post:
      summary: Make a transaction to one recipient
      operationId: transfer
      tags:
        - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                recipient:
                  type: string
                fee:
                  type: integer
              example:
                amount: 10
                recipient: ede56a0c0df10af89afdab4a3cf1b5af9019af65367f64bde7aa259ab8f7d449
                fee: 2
      responses:
        200:
          description: The generated transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /wallet/multitransfer:
    post:
      summary: Make a transaction to multiple recipients
      operationId: multitransfer
      tags:
        - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: array
                  items:
                    type: integer
                recipient:
                  type: array
                  items:
                    type: string
                fee:
                  type: integer
              example:
                amount: [10,20]
                recipient: [ede56a0c0df10af89afdab4a3cf1b5af9019af65367f64bde7aa259ab8f7d449, 3f6f38607387b83dec30c4e1936188c771536716f2bd053ee5f13b686aa26062]
                fee: 3
      responses:
        200:
          description: The generated transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'


